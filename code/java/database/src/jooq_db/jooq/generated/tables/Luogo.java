/*
 * This file is generated by jOOQ.
 */
package jooq_db.jooq.generated.tables;


import java.util.Collection;

import jooq_db.jooq.generated.DefaultSchema;
import jooq_db.jooq.generated.Keys;
import jooq_db.jooq.generated.tables.records.LuogoRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Luogo extends TableImpl<LuogoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LUOGO</code>
     */
    public static final Luogo LUOGO = new Luogo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LuogoRecord> getRecordType() {
        return LuogoRecord.class;
    }

    /**
     * The column <code>LUOGO.NOME</code>.
     */
    public final TableField<LuogoRecord, String> NOME = createField(DSL.name("NOME"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LUOGO.LATITUDINE</code>.
     */
    public final TableField<LuogoRecord, Double> LATITUDINE = createField(DSL.name("LATITUDINE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>LUOGO.LONGITUDINE</code>.
     */
    public final TableField<LuogoRecord, Double> LONGITUDINE = createField(DSL.name("LONGITUDINE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>LUOGO.CITTA</code>.
     */
    public final TableField<LuogoRecord, String> CITTA = createField(DSL.name("CITTA"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LUOGO.INDIRIZZO</code>.
     */
    public final TableField<LuogoRecord, String> INDIRIZZO = createField(DSL.name("INDIRIZZO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LUOGO.TIPO</code>.
     */
    public final TableField<LuogoRecord, String> TIPO = createField(DSL.name("TIPO"), SQLDataType.CLOB, this, "");

    private Luogo(Name alias, Table<LuogoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Luogo(Name alias, Table<LuogoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>LUOGO</code> table reference
     */
    public Luogo(String alias) {
        this(DSL.name(alias), LUOGO);
    }

    /**
     * Create an aliased <code>LUOGO</code> table reference
     */
    public Luogo(Name alias) {
        this(alias, LUOGO);
    }

    /**
     * Create a <code>LUOGO</code> table reference
     */
    public Luogo() {
        this(DSL.name("LUOGO"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<LuogoRecord> getPrimaryKey() {
        return Keys.LUOGO__PK_LUOGO;
    }

    @Override
    public Luogo as(String alias) {
        return new Luogo(DSL.name(alias), this);
    }

    @Override
    public Luogo as(Name alias) {
        return new Luogo(alias, this);
    }

    @Override
    public Luogo as(Table<?> alias) {
        return new Luogo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Luogo rename(String name) {
        return new Luogo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Luogo rename(Name name) {
        return new Luogo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Luogo rename(Table<?> name) {
        return new Luogo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Luogo where(Condition condition) {
        return new Luogo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Luogo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Luogo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Luogo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Luogo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Luogo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Luogo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Luogo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Luogo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Luogo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
