/*
 * This file is generated by jOOQ.
 */
package jooq_db.jooq.generated.tables.records;


import jooq_db.jooq.generated.tables.Utente;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UtenteRecord extends UpdatableRecordImpl<UtenteRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>UTENTE.CODICE</code>.
     */
    public void setCodice(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>UTENTE.CODICE</code>.
     */
    public String getCodice() {
        return (String) get(0);
    }

    /**
     * Setter for <code>UTENTE.USERNAME</code>.
     */
    public void setUsername(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>UTENTE.USERNAME</code>.
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>UTENTE.PASSWORD</code>.
     */
    public void setPassword(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>UTENTE.PASSWORD</code>.
     */
    public String getPassword() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Utente.UTENTE.CODICE;
    }

    @Override
    public Field<String> field2() {
        return Utente.UTENTE.USERNAME;
    }

    @Override
    public Field<String> field3() {
        return Utente.UTENTE.PASSWORD;
    }

    @Override
    public String component1() {
        return getCodice();
    }

    @Override
    public String component2() {
        return getUsername();
    }

    @Override
    public String component3() {
        return getPassword();
    }

    @Override
    public String value1() {
        return getCodice();
    }

    @Override
    public String value2() {
        return getUsername();
    }

    @Override
    public String value3() {
        return getPassword();
    }

    @Override
    public UtenteRecord value1(String value) {
        setCodice(value);
        return this;
    }

    @Override
    public UtenteRecord value2(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public UtenteRecord value3(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public UtenteRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UtenteRecord
     */
    public UtenteRecord() {
        super(Utente.UTENTE);
    }

    /**
     * Create a detached, initialised UtenteRecord
     */
    public UtenteRecord(String codice, String username, String password) {
        super(Utente.UTENTE);

        setCodice(codice);
        setUsername(username);
        setPassword(password);
        resetChangedOnNotNull();
    }
}
