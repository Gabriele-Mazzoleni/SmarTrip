/*
 * This file is generated by jOOQ.
 */
package jooq_db.jooq.generated.tables;


import java.util.function.Function;

import jooq_db.jooq.generated.DefaultSchema;
import jooq_db.jooq.generated.Keys;
import jooq_db.jooq.generated.tables.records.MappaRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mappa extends TableImpl<MappaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MAPPA</code>
     */
    public static final Mappa MAPPA = new Mappa();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MappaRecord> getRecordType() {
        return MappaRecord.class;
    }

    /**
     * The column <code>MAPPA.NOMEMAPPA</code>.
     */
    public final TableField<MappaRecord, String> NOMEMAPPA = createField(DSL.name("NOMEMAPPA"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>MAPPA.NOMEUTENTE</code>.
     */
    public final TableField<MappaRecord, String> NOMEUTENTE = createField(DSL.name("NOMEUTENTE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>MAPPA.GIORNO</code>.
     */
    public final TableField<MappaRecord, Integer> GIORNO = createField(DSL.name("GIORNO"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MAPPA.LISTANOME</code>.
     */
    public final TableField<MappaRecord, String> LISTANOME = createField(DSL.name("LISTANOME"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>MAPPA.LISTALATITUDINE</code>.
     */
    public final TableField<MappaRecord, String> LISTALATITUDINE = createField(DSL.name("LISTALATITUDINE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>MAPPA.LISTALONGITUDINE</code>.
     */
    public final TableField<MappaRecord, String> LISTALONGITUDINE = createField(DSL.name("LISTALONGITUDINE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>MAPPA.LISTATEMPOVISITA</code>.
     */
    public final TableField<MappaRecord, String> LISTATEMPOVISITA = createField(DSL.name("LISTATEMPOVISITA"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>MAPPA.LISTAORAARRIVO</code>.
     */
    public final TableField<MappaRecord, String> LISTAORAARRIVO = createField(DSL.name("LISTAORAARRIVO"), SQLDataType.CLOB, this, "");

    private Mappa(Name alias, Table<MappaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mappa(Name alias, Table<MappaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>MAPPA</code> table reference
     */
    public Mappa(String alias) {
        this(DSL.name(alias), MAPPA);
    }

    /**
     * Create an aliased <code>MAPPA</code> table reference
     */
    public Mappa(Name alias) {
        this(alias, MAPPA);
    }

    /**
     * Create a <code>MAPPA</code> table reference
     */
    public Mappa() {
        this(DSL.name("MAPPA"), null);
    }

    public <O extends Record> Mappa(Table<O> child, ForeignKey<O, MappaRecord> key) {
        super(child, key, MAPPA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<MappaRecord> getPrimaryKey() {
        return Keys.MAPPA__PK_MAPPA;
    }

    @Override
    public Mappa as(String alias) {
        return new Mappa(DSL.name(alias), this);
    }

    @Override
    public Mappa as(Name alias) {
        return new Mappa(alias, this);
    }

    @Override
    public Mappa as(Table<?> alias) {
        return new Mappa(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mappa rename(String name) {
        return new Mappa(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mappa rename(Name name) {
        return new Mappa(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mappa rename(Table<?> name) {
        return new Mappa(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, Integer, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
