/*
 * This file is generated by jOOQ.
 */
package jooq_db.jooq.generated.tables;


import java.util.function.Function;

import jooq_db.jooq.generated.DefaultSchema;
import jooq_db.jooq.generated.Keys;
import jooq_db.jooq.generated.tables.records.LuogoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Luogo extends TableImpl<LuogoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LUOGO</code>
     */
    public static final Luogo LUOGO = new Luogo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LuogoRecord> getRecordType() {
        return LuogoRecord.class;
    }

    /**
     * The column <code>LUOGO.NOME</code>.
     */
    public final TableField<LuogoRecord, String> NOME = createField(DSL.name("NOME"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LUOGO.LATITUDINE</code>.
     */
    public final TableField<LuogoRecord, Double> LATITUDINE = createField(DSL.name("LATITUDINE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>LUOGO.LONGITUDINE</code>.
     */
    public final TableField<LuogoRecord, Double> LONGITUDINE = createField(DSL.name("LONGITUDINE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>LUOGO.CITTA</code>.
     */
    public final TableField<LuogoRecord, String> CITTA = createField(DSL.name("CITTA"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LUOGO.INDIRIZZO</code>.
     */
    public final TableField<LuogoRecord, String> INDIRIZZO = createField(DSL.name("INDIRIZZO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LUOGO.TIPO</code>.
     */
    public final TableField<LuogoRecord, String> TIPO = createField(DSL.name("TIPO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LUOGO.TEMPO</code>.
     */
    public final TableField<LuogoRecord, Integer> TEMPO = createField(DSL.name("TEMPO"), SQLDataType.INTEGER, this, "");

    private Luogo(Name alias, Table<LuogoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Luogo(Name alias, Table<LuogoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LUOGO</code> table reference
     */
    public Luogo(String alias) {
        this(DSL.name(alias), LUOGO);
    }

    /**
     * Create an aliased <code>LUOGO</code> table reference
     */
    public Luogo(Name alias) {
        this(alias, LUOGO);
    }

    /**
     * Create a <code>LUOGO</code> table reference
     */
    public Luogo() {
        this(DSL.name("LUOGO"), null);
    }

    public <O extends Record> Luogo(Table<O> child, ForeignKey<O, LuogoRecord> key) {
        super(child, key, LUOGO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<LuogoRecord> getPrimaryKey() {
        return Keys.LUOGO__PK_LUOGO;
    }

    @Override
    public Luogo as(String alias) {
        return new Luogo(DSL.name(alias), this);
    }

    @Override
    public Luogo as(Name alias) {
        return new Luogo(alias, this);
    }

    @Override
    public Luogo as(Table<?> alias) {
        return new Luogo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Luogo rename(String name) {
        return new Luogo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Luogo rename(Name name) {
        return new Luogo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Luogo rename(Table<?> name) {
        return new Luogo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Double, Double, String, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super Double, ? super Double, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super Double, ? super Double, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
